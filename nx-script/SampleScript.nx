//
//
// GLOBALS
//
//
print("--------------------")
print("Globals")
print("--------------------")
print("cwd =", cwd)
print("pi =", pi)
print("Functions:")
print("    print()", " - print all arguments to the console")
print("    typeof()", "- print the type of the first argument")
print("    help()", "  - print all variables & functions in the current scope")
print("    read()", "  - read a file (path as first argument)")
print("    write()", " - write a file (path as first argument, content as second argument)")
print("    len()", "   - get the length of an the first argument")
print("Running help now:")
help() // Prints all variables & functions in the current scope
print()

//
//
// TYPES
//
//
print("--------------------")
print("Types")
print("--------------------")
let _nil = nil      print("Nil:     ", _nil,   "typeof(nil) =",       typeof(_nil))
let _true = true    print("True:    ", _true,  "typeof(true) =",      typeof(_true))
let _false = false  print("False:   ", _false, "typeof(false) =",     typeof(_false))
let _num = 1        print("Number:  ", _num,   "typeof(1) =",         typeof(_num))
let _str = "foo"    print("String:  ", _str,   "typeof('foo') =",     typeof(_str))
let _seq = [1,2,3]  print("Seq:     ", _seq,   "typeof([1,2,3]) =",   typeof(_seq))
let _obj = {1:2}    print("Object:  ", _obj,   "typeof({1:2}) =",     typeof(_obj))
let _fn = fn x -> x print("Function:", _fn,    "typeof(fn x -> x) =", typeof(_fn))
print()

//
//
// ARITHMETIC
//
//
print("--------------------")
print("Arithmetic")
print("--------------------")
let n = 0
n = 1 + 2 * 3     print("n = 1 + 2 * 3    ", n, typeof(n)) // 7 Number
n = 1 + 2 * 3 + 4 print("n = 1 + 2 * 3 + 4", n, typeof(n)) // 11 Number
n = 10 / 3        print("n = 10 / 3       ", n, typeof(n)) // 3.333333 Number
n = 10 % 3        print("n = 10 % 3       ", n, typeof(n)) // 1 Number
n = 10 % 3 + 1    print("n = 10 % 3 + 1   ", n, typeof(n)) // 2 Number
n = 2^3           print("n = 2^3          ", n, typeof(n)) // 8 Number
n = 2^3 + 1       print("n = 2^3 + 1      ", n, typeof(n)) // 9 Number
n = 2^3 + 1 * 2   print("n = 2^3 + 1 * 2  ", n, typeof(n)) // 10 Number
print()

//
//
// COMPARISON
//
//
print("--------------------")
print("Comparison")
print("--------------------")
print("Equality:")
print("1 == 1            ", 1 == 1)
print("1 == 2            ", 1 == 2)
print("'a' == 'a'        ", "a" == "a")
print("'a' == 'b'        ", "a" == "b")
print("true == true      ", true == true)
print("true == false     ", true == false)
print("[1,2,3] == [1,2,3]", [1,2,3] == [1,2,3])
print("{1:2} == {1:2}    ", {1:2} == {1:2})
print()

print("Reference equality:")
let ref = [1,2,3]
let ref1 = "foo"
let ref2 = {"seq": ref, "str": ref1}
print("ref = [1,2,3] ref1 = 'foo' ref2 = {'seq': ref, 'str': ref1}")
print("ref      == ref     ", ref == ref)
print("ref      == [1,2,3] ", ref == [1,2,3])
print("ref1     == ref1    ", ref1 == ref1)
print("ref1     == 'foo'   ", ref1 == "foo")
print("ref2     == ref2    ", ref2 == ref2)
print("ref2.seq == ref     ", ref2.seq == ref)
print("ref2.str == ref1    ", ref2.str == ref1)
print()

//
//
// CONDITIONALS & LOOPS
//
//
print("--------------------")
print("Conditionals & Loops")
print("--------------------")
print("While-Loops and If-Statements:")
let i = 0
while i < 3 {
    print("'i'", typeof(i), i)

    let j = 0
    while (j = j + 1) < 3
        print("   'i':", i, "j", j)
    
    i = i + 1
}
print("Sequential fibonacci:")
let __i=3
let __n=50
let __t1=0
let __t2=1
let __tNext=__t1 + __t2

while __i < __n {
    print("... of", __i, "is",__tNext)
    __t1 = __t2
    __t2 = __tNext
    __tNext = __t1 + __t2
    __i = __i + 1
}
print()

//
//
// IO
//
//
print("--------------------")
print("IO")
print("--------------------")
print("Writing to file with: write(cwd + '/Test.txt'")
write(cwd + "/Test.txt", "Hello World!")
print("Reading a file with: read(cwd + '/Test.txt'")
let _read = read(cwd + "/Test.txt")
print("Read returned",_read)
print()

//
//
// OBJECTS
//
//
print("--------------------")
print("Objects")
print("--------------------")
let _prop = "abc"
let _nested = {1:2, 3:4, 5:6}

let obj = {
    1: "Key is number",
    1.1111112: "Key is decimal number",
    1.1111111: "Key is a whole different number",
    true: "Key is boolean",
    "foo": "Key is string",
    _prop: "Key is a reference",
    _nested: "Key is also a reference",
    nil: "Key is nil",
    ([1,2,3]): "Key is a seq",
}

print("obj:", obj)
print("obj[1] =         ", obj[1])
print("obj[1.1111112] = ", obj[1.1111112])
print("obj[1.1111111] = ", obj[1.1111111])
print("obj[true] =      ", obj[true])
print("obj['foo'] =     ", obj["foo"])
print("obj[_prop] =     ", obj[_prop])
print("obj[_nested] =   ", obj[_nested])
print("obj[nil] =       ", obj[nil])
print("obj[[1,2,3]] =   ", obj[[1,2,3]])
print("Member access:")
print("a.foo =          ", obj.foo)
print("a._prop =        ", obj._prop)

let nested_obj = {
    1: {
        2: "Hi!"
    }
}

print("Nested object nested_obj =", nested_obj)
print("nested_obj[1] =           ", nested_obj[1])
print("nested_obj[1][2] =        ", nested_obj[1][2])
print()

//
//
// FUNCTIONS
//
//
print("--------------------")
print("Functions")
print("--------------------")
let fib = fn n -> if n <= 1 ret n else ret (fib(n-1) + fib(n-2))

let map = fn seq, callback -> {
    let i = 0
    while i < len(seq) {
        seq[i] = callback(seq[i], i, seq)
        i = i + 1
    }
    ret seq
}

let for_each = fn seq, callback -> {
    let i = 0
    while i < len(seq) {
        callback(seq[i], i, seq)
        i = i + 1
    }
}

let to_seq = fn val -> {
    print("typeof(val) =", typeof(val), typeof(val) == "Seq", typeof(true))
    if typeof(val) == "Seq" ret val
    ret [] + val
}

print("to_seq(1) =", to_seq(1))
print("to_seq([1,2,3]) =", to_seq([1,2,3]))

print("fib(6) =",fib(6))
print("fib(7) =",fib(7))
print("fib(8) =",fib(8))
print("fib(9) =",fib(9))
print("fib(10) =",fib(10))
print("fib(11) =",fib(11))
print("fib(12) =",fib(12))
print("fib(13) =",fib(13))
print("fib(14) =",fib(14))
print("fib(15) =",fib(15))

print("for_each([1,2,3], fn x, i, seq -> print('  value at', i, x)) =")
for_each([1,2,3], fn x, i, seq -> print("  value at", i, x))

let y = [] + "Hhhh"
print("y before mapping =",y)
map(y, fn x, i, seq -> x + "e ")
print("y after mapping =",y)

let str_seq = map([] + "iii", fn x, i, seq -> "h" + x)
print("str_seq =", str_seq)
ret 1

// AOC23 Day 1 Part 1

// let is_str_digit = fn x -> 
//     x == "0" || x == "1" || x == "2" || x == "3" || x == "4" || 
//     x == "5" || x == "6" || x == "7" || x == "8" || x == "9"

// let get_calibration_values_of_line = fn str_line -> {
//     let seq = []+str_line // seq + str will split by char
//     let seq_len = len(seq)

//     let first_no = ""
//     let last_no = ""

//     let i = 0
//     let j = seq_len - 1

//     // only while loops exist - currently
//     while i < seq_len && j >= 0 {
//         if first_no == "" && is_str_digit(seq[i]) first_no = seq[i]
//         if last_no == "" && is_str_digit(seq[j]) last_no = seq[j]
        
//         i = i + 1 
//         j = j - 1
//     }

//     if (first_no == "") first_no = last_no
//     if (last_no == "") last_no = first_no

//     let str_no = first_no + last_no // str concat

//     ret (0+str_no) // str to num
// }

// let lines = split_by_newline(read(cwd + "/SampleInput.txt"))
// let sum = 0
// let i = 0

// while i < len(lines) {
//     let calib_val = get_calibration_values_of_line(lines[i])
//     sum = sum + calib_val
//     i = i + 1
// }

// print("Sum:", sum) // 54951 took 507ms (Debug build)