//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Projects/nx-script///src//Nx.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class NxLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OR=1, AND=2, EQ=3, NEQ=4, GT=5, LT=6, GTEQ=7, LTEQ=8, PLUS=9, MINUS=10, 
		MULT=11, DIV=12, MOD=13, POW=14, NOT=15, COMMA=16, SCOL=17, ASSIGN=18, 
		OPAR=19, CPAR=20, OBRACE=21, CBRACE=22, OBRACK=23, CBRACK=24, TRUE=25, 
		FALSE=26, NIL=27, IF=28, ELSE=29, WHILE=30, LOG=31, ID=32, INT=33, FLOAT=34, 
		STRING=35, COMMENT=36, SPACE=37, OTHER=38;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"OR", "AND", "EQ", "NEQ", "GT", "LT", "GTEQ", "LTEQ", "PLUS", "MINUS", 
		"MULT", "DIV", "MOD", "POW", "NOT", "COMMA", "SCOL", "ASSIGN", "OPAR", 
		"CPAR", "OBRACE", "CBRACE", "OBRACK", "CBRACK", "TRUE", "FALSE", "NIL", 
		"IF", "ELSE", "WHILE", "LOG", "ID", "INT", "FLOAT", "STRING", "COMMENT", 
		"SPACE", "OTHER"
	};


	public NxLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public NxLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'||'", "'&&'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'^'", "'!'", "','", "';'", "'='", "'('", 
		"')'", "'{'", "'}'", "'['", "']'", "'true'", "'false'", "'nil'", "'if'", 
		"'else'", "'while'", "'log'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OR", "AND", "EQ", "NEQ", "GT", "LT", "GTEQ", "LTEQ", "PLUS", "MINUS", 
		"MULT", "DIV", "MOD", "POW", "NOT", "COMMA", "SCOL", "ASSIGN", "OPAR", 
		"CPAR", "OBRACE", "CBRACE", "OBRACK", "CBRACK", "TRUE", "FALSE", "NIL", 
		"IF", "ELSE", "WHILE", "LOG", "ID", "INT", "FLOAT", "STRING", "COMMENT", 
		"SPACE", "OTHER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Nx.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static NxLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,38,224,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,
		3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,
		11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,
		18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,
		24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,
		27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,
		30,1,30,1,30,1,31,1,31,5,31,167,8,31,10,31,12,31,170,9,31,1,32,4,32,173,
		8,32,11,32,12,32,174,1,33,4,33,178,8,33,11,33,12,33,179,1,33,1,33,5,33,
		184,8,33,10,33,12,33,187,9,33,1,33,1,33,4,33,191,8,33,11,33,12,33,192,
		3,33,195,8,33,1,34,1,34,1,34,1,34,5,34,201,8,34,10,34,12,34,204,9,34,1,
		34,1,34,1,35,1,35,1,35,1,35,5,35,212,8,35,10,35,12,35,215,9,35,1,35,1,
		35,1,36,1,36,1,36,1,36,1,37,1,37,0,0,38,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
		15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
		39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
		63,32,65,33,67,34,69,35,71,36,73,37,75,38,1,0,6,3,0,65,90,95,95,97,122,
		4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,10,10,13,13,34,34,2,0,10,10,
		13,13,3,0,9,10,13,13,32,32,232,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
		1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
		0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
		1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
		0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
		1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
		0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
		1,0,0,0,0,75,1,0,0,0,1,77,1,0,0,0,3,80,1,0,0,0,5,83,1,0,0,0,7,86,1,0,0,
		0,9,89,1,0,0,0,11,91,1,0,0,0,13,93,1,0,0,0,15,96,1,0,0,0,17,99,1,0,0,0,
		19,101,1,0,0,0,21,103,1,0,0,0,23,105,1,0,0,0,25,107,1,0,0,0,27,109,1,0,
		0,0,29,111,1,0,0,0,31,113,1,0,0,0,33,115,1,0,0,0,35,117,1,0,0,0,37,119,
		1,0,0,0,39,121,1,0,0,0,41,123,1,0,0,0,43,125,1,0,0,0,45,127,1,0,0,0,47,
		129,1,0,0,0,49,131,1,0,0,0,51,136,1,0,0,0,53,142,1,0,0,0,55,146,1,0,0,
		0,57,149,1,0,0,0,59,154,1,0,0,0,61,160,1,0,0,0,63,164,1,0,0,0,65,172,1,
		0,0,0,67,194,1,0,0,0,69,196,1,0,0,0,71,207,1,0,0,0,73,218,1,0,0,0,75,222,
		1,0,0,0,77,78,5,124,0,0,78,79,5,124,0,0,79,2,1,0,0,0,80,81,5,38,0,0,81,
		82,5,38,0,0,82,4,1,0,0,0,83,84,5,61,0,0,84,85,5,61,0,0,85,6,1,0,0,0,86,
		87,5,33,0,0,87,88,5,61,0,0,88,8,1,0,0,0,89,90,5,62,0,0,90,10,1,0,0,0,91,
		92,5,60,0,0,92,12,1,0,0,0,93,94,5,62,0,0,94,95,5,61,0,0,95,14,1,0,0,0,
		96,97,5,60,0,0,97,98,5,61,0,0,98,16,1,0,0,0,99,100,5,43,0,0,100,18,1,0,
		0,0,101,102,5,45,0,0,102,20,1,0,0,0,103,104,5,42,0,0,104,22,1,0,0,0,105,
		106,5,47,0,0,106,24,1,0,0,0,107,108,5,37,0,0,108,26,1,0,0,0,109,110,5,
		94,0,0,110,28,1,0,0,0,111,112,5,33,0,0,112,30,1,0,0,0,113,114,5,44,0,0,
		114,32,1,0,0,0,115,116,5,59,0,0,116,34,1,0,0,0,117,118,5,61,0,0,118,36,
		1,0,0,0,119,120,5,40,0,0,120,38,1,0,0,0,121,122,5,41,0,0,122,40,1,0,0,
		0,123,124,5,123,0,0,124,42,1,0,0,0,125,126,5,125,0,0,126,44,1,0,0,0,127,
		128,5,91,0,0,128,46,1,0,0,0,129,130,5,93,0,0,130,48,1,0,0,0,131,132,5,
		116,0,0,132,133,5,114,0,0,133,134,5,117,0,0,134,135,5,101,0,0,135,50,1,
		0,0,0,136,137,5,102,0,0,137,138,5,97,0,0,138,139,5,108,0,0,139,140,5,115,
		0,0,140,141,5,101,0,0,141,52,1,0,0,0,142,143,5,110,0,0,143,144,5,105,0,
		0,144,145,5,108,0,0,145,54,1,0,0,0,146,147,5,105,0,0,147,148,5,102,0,0,
		148,56,1,0,0,0,149,150,5,101,0,0,150,151,5,108,0,0,151,152,5,115,0,0,152,
		153,5,101,0,0,153,58,1,0,0,0,154,155,5,119,0,0,155,156,5,104,0,0,156,157,
		5,105,0,0,157,158,5,108,0,0,158,159,5,101,0,0,159,60,1,0,0,0,160,161,5,
		108,0,0,161,162,5,111,0,0,162,163,5,103,0,0,163,62,1,0,0,0,164,168,7,0,
		0,0,165,167,7,1,0,0,166,165,1,0,0,0,167,170,1,0,0,0,168,166,1,0,0,0,168,
		169,1,0,0,0,169,64,1,0,0,0,170,168,1,0,0,0,171,173,7,2,0,0,172,171,1,0,
		0,0,173,174,1,0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,66,1,0,0,0,176,
		178,7,2,0,0,177,176,1,0,0,0,178,179,1,0,0,0,179,177,1,0,0,0,179,180,1,
		0,0,0,180,181,1,0,0,0,181,185,5,46,0,0,182,184,7,2,0,0,183,182,1,0,0,0,
		184,187,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,195,1,0,0,0,187,185,
		1,0,0,0,188,190,5,46,0,0,189,191,7,2,0,0,190,189,1,0,0,0,191,192,1,0,0,
		0,192,190,1,0,0,0,192,193,1,0,0,0,193,195,1,0,0,0,194,177,1,0,0,0,194,
		188,1,0,0,0,195,68,1,0,0,0,196,202,5,34,0,0,197,201,8,3,0,0,198,199,5,
		34,0,0,199,201,5,34,0,0,200,197,1,0,0,0,200,198,1,0,0,0,201,204,1,0,0,
		0,202,200,1,0,0,0,202,203,1,0,0,0,203,205,1,0,0,0,204,202,1,0,0,0,205,
		206,5,34,0,0,206,70,1,0,0,0,207,208,5,47,0,0,208,209,5,47,0,0,209,213,
		1,0,0,0,210,212,8,4,0,0,211,210,1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,
		0,213,214,1,0,0,0,214,216,1,0,0,0,215,213,1,0,0,0,216,217,6,35,0,0,217,
		72,1,0,0,0,218,219,7,5,0,0,219,220,1,0,0,0,220,221,6,36,0,0,221,74,1,0,
		0,0,222,223,9,0,0,0,223,76,1,0,0,0,10,0,168,174,179,185,192,194,200,202,
		213,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
