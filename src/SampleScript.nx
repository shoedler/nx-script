help(); // Prints all variables & functions in the global scope
print();

print("Booleans:");
if true   print("true = ", true);       // Ok
if false  print("false = ", true);       // Nope
if !false print("false = ", false);      // Ok
print();

print("Number to boolean:");
if 0    print("0 =", true);            // Nope
if !0   print("0 =", false);           // Ok
if 1    print("1 =", true);            // Ok
if -1   print("-1 =", true);           // Ok
if 1234 print("1234 =", true);         // Ok
print();

print("String to boolean");
if ""       print("empty string = ", true);   // Nope
if !""      print("empty string = ", false);  // Ok
if !"false" print("`false` = ", false);       // Ok
if "true"   print("`true` = ", true);         // Ok
print();

print("Boolean to number:");
x = true + 0;  print(x, typeof(x));  // 1 Number
x = false + 0; print(x, typeof(x));  // 0 Number
print();

print("Equality:");
if 1 == 1 print("1 == 1", true); // Ok
if 1 == 2 print("1 == 2", true); // Nope
if "a" == "a" print("`a` == `a`", true); // Ok
if "a" == "b" print("`a` == `b`", true); // Nope

print("String to number:");
x = 1234 + "";          print(x, typeof(x)); // 1234 Number
x = 0 + "";             print(x, typeof(x)); // 0 Number
x = -1 + "1";           print(x, typeof(x)); // 0 Number
x = 10 + "abacd";       print(x, typeof(x)); // 10 Number
x = 10 + "abacd123";    print(x, typeof(x)); // 10 Number
x = 10 + "123abacd123"; print(x, typeof(x)); // 10 Number
x = ("-1" + 0) * "-2";  print(x, typeof(x)); // 20 Number
print();

print("Number to string:");
x = "1234" + 0; print(x, typeof(x)); // 1234 String
x = "0" + 0;    print(x, typeof(x)); // 00 String
x = "-1" + 0;   print(x, typeof(x)); // -10 String
print();

print("Nil:");
x = nil; print(x, typeof(x)); // nil Nil
print();

print("Arithmetic shenanigans:");
x = 1 + 2 * 3;     print(x, typeof(x)); // 7 Number
x = 1 + 2 * 3 + 4; print(x, typeof(x)); // 11 Number
x = 10 / 3;        print(x, typeof(x)); // 3.333333 Number
x = 10 % 3;        print(x, typeof(x)); // 1 Number
x = 10 % 3 + 1;    print(x, typeof(x)); // 2 Number
x = 2^3;           print(x, typeof(x)); // 8 Number
x = 2^3 + 1;       print(x, typeof(x)); // 9 Number
x = 2^3 + 1 * 2;   print(x, typeof(x)); // 10 Number
print();

print("While-Loops and If-Statements:");
a = true;
while (a) {
    a = a + 1;

    if (a > 10) {
        a = false;
    }

    print("'a'", typeof(a), a);
}
print();

b = 0;
while b <= 3 {
    if b < 2 print(b, "b < 2");
    else if b > 2 print(b, "b > 2");
    else print(b, "b == 2");
    b = b + 1;
}
print();

print("Writing file");
write(cwd + "/Test.txt", "Hello World!");

print("Read file:");
read = read(cwd + "/Test.txt");
print(read);
print();

a = ["asd", false, 123];
print(a);
print(a[0]);

x = "abc";

a = {
    1: "Key is number",
    1.1111112: "Key is a precise number",
    1.1111111: "Key is a whole different number",
    true: "Key is boolean",
    "foo": "Key is string",
    x: "Key is a reference",
    nil: "Key is nil",
    ([1,2,3]): "Key is an array",
};

print("Obj", a);
print();

print("Get 1 with indexing", a[1]);
print("Get 1.1111112 with indexing", a[1.1111112]);
print("Get 1.1111111 with indexing", a[1.1111111]);
print("Get true with indexing", a[true]);
print("Get 'foo' with indexing", a["foo"]);
print("Get x with indexing", a[x]);
print("Get nil with indexing", a[nil]);
print("Get [1,2,3] with indexing (isn't the same reference - doesn't work!)", a[[1,2,3]]);
print();

print("Get 1 with member access does not work - e.g. a.1");
print("Get true with member access does not work, because true is a keyword - e.g. a.true");
print("Get 'foo' with member access", a.foo);
print("Get x with member access", a.x);
print("Get nil with member access does not work, because nil is a keyword - e.g. a.nil");
print("Get [1,2,3] with member access, does not work - e.g. a.[1,2,3]");
print();

a = {
    1: {
        2: "Nested object"
    }
};

print("Nested object a =", a);
print();
print("a[1] =", a[1]);
print("a[1][2] =", a[1][2]);
print();

print("Fibonacci");
i=3;
n=10;
t1=0;
t2=1;
tNext=t1+t2;

while i < n {
    print("... of", i, "is", tNext);
    t1 = t2;
    t2 = tNext;
    tNext = t1 + t2;
    i = i + 1;
}
