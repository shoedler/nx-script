//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Projects/nx-script///src//Nx.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class NxParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OR=1, AND=2, EQ=3, NEQ=4, GT=5, LT=6, GTEQ=7, LTEQ=8, PLUS=9, MINUS=10, 
		MULT=11, DIV=12, MOD=13, POW=14, NOT=15, COMMA=16, SCOL=17, ASSIGN=18, 
		OPAR=19, CPAR=20, OBRACE=21, CBRACE=22, OBRACK=23, CBRACK=24, TRUE=25, 
		FALSE=26, NIL=27, IF=28, ELSE=29, WHILE=30, LOG=31, ID=32, INT=33, FLOAT=34, 
		STRING=35, COMMENT=36, SPACE=37, OTHER=38;
	public const int
		RULE_parse = 0, RULE_block = 1, RULE_stat = 2, RULE_assignment = 3, RULE_if_stat = 4, 
		RULE_stat_block = 5, RULE_while_stat = 6, RULE_expr = 7, RULE_atom = 8;
	public static readonly string[] ruleNames = {
		"parse", "block", "stat", "assignment", "if_stat", "stat_block", "while_stat", 
		"expr", "atom"
	};

	private static readonly string[] _LiteralNames = {
		null, "'||'", "'&&'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'^'", "'!'", "','", "';'", "'='", "'('", 
		"')'", "'{'", "'}'", "'['", "']'", "'true'", "'false'", "'nil'", "'if'", 
		"'else'", "'while'", "'log'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OR", "AND", "EQ", "NEQ", "GT", "LT", "GTEQ", "LTEQ", "PLUS", "MINUS", 
		"MULT", "DIV", "MOD", "POW", "NOT", "COMMA", "SCOL", "ASSIGN", "OPAR", 
		"CPAR", "OBRACE", "CBRACE", "OBRACK", "CBRACK", "TRUE", "FALSE", "NIL", 
		"IF", "ELSE", "WHILE", "LOG", "ID", "INT", "FLOAT", "STRING", "COMMENT", 
		"SPACE", "OTHER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Nx.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static NxParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public NxParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NxParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(NxParser.Eof, 0); }
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			block();
			State = 19;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 340888421376L) != 0)) {
				{
				{
				State = 21;
				stat();
				}
				}
				State = 26;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public IToken _OTHER;
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statContext if_stat() {
			return GetRuleContext<If_statContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_statContext while_stat() {
			return GetRuleContext<While_statContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL() { return GetToken(NxParser.SCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHER() { return GetToken(NxParser.OTHER, 0); }
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 4, RULE_stat);
		try {
			State = 35;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 27;
				assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 28;
				if_stat();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 29;
				while_stat();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 30;
				expr(0);
				State = 31;
				Match(SCOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 33;
				_localctx._OTHER = Match(OTHER);
				 throw new System.Exception("Unknown Character: " + (_localctx._OTHER!=null?_localctx._OTHER.Text:null)); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(NxParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(NxParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL() { return GetToken(NxParser.SCOL, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			Match(ID);
			State = 38;
			Match(ASSIGN);
			State = 39;
			expr(0);
			State = 40;
			Match(SCOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(NxParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(NxParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stat_blockContext[] stat_block() {
			return GetRuleContexts<Stat_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stat_blockContext stat_block(int i) {
			return GetRuleContext<Stat_blockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(NxParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(NxParser.ELSE, i);
		}
		public If_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statContext if_stat() {
		If_statContext _localctx = new If_statContext(Context, State);
		EnterRule(_localctx, 8, RULE_if_stat);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			Match(IF);
			State = 43;
			expr(0);
			State = 44;
			stat_block();
			State = 52;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 45;
					Match(ELSE);
					State = 46;
					Match(IF);
					State = 47;
					expr(0);
					State = 48;
					stat_block();
					}
					} 
				}
				State = 54;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 57;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 55;
				Match(ELSE);
				State = 56;
				stat_block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACE() { return GetToken(NxParser.OBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACE() { return GetToken(NxParser.CBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public Stat_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_blockContext stat_block() {
		Stat_blockContext _localctx = new Stat_blockContext(Context, State);
		EnterRule(_localctx, 10, RULE_stat_block);
		try {
			State = 64;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59;
				Match(OBRACE);
				State = 60;
				block();
				State = 61;
				Match(CBRACE);
				}
				break;
			case MINUS:
			case NOT:
			case OPAR:
			case OBRACK:
			case TRUE:
			case FALSE:
			case NIL:
			case IF:
			case WHILE:
			case ID:
			case INT:
			case FLOAT:
			case STRING:
			case OTHER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 63;
				stat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(NxParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stat_blockContext stat_block() {
			return GetRuleContext<Stat_blockContext>(0);
		}
		public While_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_stat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statContext while_stat() {
		While_statContext _localctx = new While_statContext(Context, State);
		EnterRule(_localctx, 12, RULE_while_stat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(WHILE);
			State = 67;
			expr(0);
			State = 68;
			stat_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACK() { return GetToken(NxParser.OBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACK() { return GetToken(NxParser.CBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NxParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NxParser.COMMA, i);
		}
		public ArrayExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public AtomExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(NxParser.OR, 0); }
		public OrExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(NxParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(NxParser.MINUS, 0); }
		public AdditiveExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTEQ() { return GetToken(NxParser.LTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTEQ() { return GetToken(NxParser.GTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(NxParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(NxParser.GT, 0); }
		public RelationalExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnCallExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(NxParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(NxParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(NxParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NxParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NxParser.COMMA, i);
		}
		public FnCallExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACK() { return GetToken(NxParser.OBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACK() { return GetToken(NxParser.CBRACK, 0); }
		public IndexExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(NxParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(NxParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnaryMinusExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(NxParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(NxParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(NxParser.MOD, 0); }
		public MultiplicationExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(NxParser.POW, 0); }
		public PowExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(NxParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(NxParser.NEQ, 0); }
		public EqualityExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(NxParser.AND, 0); }
		public AndExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				_localctx = new FnCallExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 71;
				Match(ID);
				State = 72;
				Match(OPAR);
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 64668337152L) != 0)) {
					{
					State = 73;
					expr(0);
					State = 78;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 74;
						Match(COMMA);
						State = 75;
						expr(0);
						}
						}
						State = 80;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 83;
				Match(CPAR);
				}
				break;
			case 2:
				{
				_localctx = new ArrayExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 84;
				Match(OBRACK);
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 64668337152L) != 0)) {
					{
					State = 85;
					expr(0);
					State = 90;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 86;
						Match(COMMA);
						State = 87;
						expr(0);
						}
						}
						State = 92;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 95;
				Match(CBRACK);
				}
				break;
			case 3:
				{
				_localctx = new UnaryMinusExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 96;
				Match(MINUS);
				State = 97;
				expr(9);
				}
				break;
			case 4:
				{
				_localctx = new NotExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 98;
				Match(NOT);
				State = 99;
				expr(8);
				}
				break;
			case 5:
				{
				_localctx = new AtomExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 100;
				atom();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 131;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 129;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new PowExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 103;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 104;
						Match(POW);
						State = 105;
						expr(11);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicationExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 106;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 107;
						((MultiplicationExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 14336L) != 0)) ) {
							((MultiplicationExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 108;
						expr(8);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 109;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 110;
						((AdditiveExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AdditiveExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 111;
						expr(7);
						}
						break;
					case 4:
						{
						_localctx = new RelationalExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 112;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 113;
						((RelationalExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 480L) != 0)) ) {
							((RelationalExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 114;
						expr(6);
						}
						break;
					case 5:
						{
						_localctx = new EqualityExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 115;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 116;
						((EqualityExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EQ || _la==NEQ) ) {
							((EqualityExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 117;
						expr(5);
						}
						break;
					case 6:
						{
						_localctx = new AndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 118;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 119;
						Match(AND);
						State = 120;
						expr(4);
						}
						break;
					case 7:
						{
						_localctx = new OrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 121;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 122;
						Match(OR);
						State = 123;
						expr(3);
						}
						break;
					case 8:
						{
						_localctx = new IndexExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 124;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 125;
						Match(OBRACK);
						State = 126;
						expr(0);
						State = 127;
						Match(CBRACK);
						}
						break;
					}
					} 
				}
				State = 133;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParExprContext : AtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(NxParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(NxParser.CPAR, 0); }
		public ParExprContext(AtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanAtomContext : AtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(NxParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(NxParser.FALSE, 0); }
		public BooleanAtomContext(AtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdAtomContext : AtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(NxParser.ID, 0); }
		public IdAtomContext(AtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringAtomContext : AtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(NxParser.STRING, 0); }
		public StringAtomContext(AtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NilAtomContext : AtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL() { return GetToken(NxParser.NIL, 0); }
		public NilAtomContext(AtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNilAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberAtomContext : AtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(NxParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(NxParser.FLOAT, 0); }
		public NumberAtomContext(AtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INxVisitor<TResult> typedVisitor = visitor as INxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 16, RULE_atom);
		int _la;
		try {
			State = 143;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPAR:
				_localctx = new ParExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 134;
				Match(OPAR);
				State = 135;
				expr(0);
				State = 136;
				Match(CPAR);
				}
				break;
			case INT:
			case FLOAT:
				_localctx = new NumberAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 138;
				_la = TokenStream.LA(1);
				if ( !(_la==INT || _la==FLOAT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TRUE:
			case FALSE:
				_localctx = new BooleanAtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 139;
				_la = TokenStream.LA(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case ID:
				_localctx = new IdAtomContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 140;
				Match(ID);
				}
				break;
			case STRING:
				_localctx = new StringAtomContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 141;
				Match(STRING);
				}
				break;
			case NIL:
				_localctx = new NilAtomContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 142;
				Match(NIL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 12);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,38,146,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,1,0,1,0,1,0,1,1,5,1,23,8,1,10,1,12,1,26,9,1,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,3,2,36,8,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,5,4,51,8,4,10,4,12,4,54,9,4,1,4,1,4,3,4,58,8,4,1,5,1,5,1,5,1,
		5,1,5,3,5,65,8,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,5,7,77,8,7,10,
		7,12,7,80,9,7,3,7,82,8,7,1,7,1,7,1,7,1,7,1,7,5,7,89,8,7,10,7,12,7,92,9,
		7,3,7,94,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,102,8,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,5,7,130,8,7,10,7,12,7,133,9,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,3,8,144,8,8,1,8,0,1,14,9,0,2,4,6,8,10,12,14,16,0,6,1,0,11,13,1,
		0,9,10,1,0,5,8,1,0,3,4,1,0,33,34,1,0,25,26,165,0,18,1,0,0,0,2,24,1,0,0,
		0,4,35,1,0,0,0,6,37,1,0,0,0,8,42,1,0,0,0,10,64,1,0,0,0,12,66,1,0,0,0,14,
		101,1,0,0,0,16,143,1,0,0,0,18,19,3,2,1,0,19,20,5,0,0,1,20,1,1,0,0,0,21,
		23,3,4,2,0,22,21,1,0,0,0,23,26,1,0,0,0,24,22,1,0,0,0,24,25,1,0,0,0,25,
		3,1,0,0,0,26,24,1,0,0,0,27,36,3,6,3,0,28,36,3,8,4,0,29,36,3,12,6,0,30,
		31,3,14,7,0,31,32,5,17,0,0,32,36,1,0,0,0,33,34,5,38,0,0,34,36,6,2,-1,0,
		35,27,1,0,0,0,35,28,1,0,0,0,35,29,1,0,0,0,35,30,1,0,0,0,35,33,1,0,0,0,
		36,5,1,0,0,0,37,38,5,32,0,0,38,39,5,18,0,0,39,40,3,14,7,0,40,41,5,17,0,
		0,41,7,1,0,0,0,42,43,5,28,0,0,43,44,3,14,7,0,44,52,3,10,5,0,45,46,5,29,
		0,0,46,47,5,28,0,0,47,48,3,14,7,0,48,49,3,10,5,0,49,51,1,0,0,0,50,45,1,
		0,0,0,51,54,1,0,0,0,52,50,1,0,0,0,52,53,1,0,0,0,53,57,1,0,0,0,54,52,1,
		0,0,0,55,56,5,29,0,0,56,58,3,10,5,0,57,55,1,0,0,0,57,58,1,0,0,0,58,9,1,
		0,0,0,59,60,5,21,0,0,60,61,3,2,1,0,61,62,5,22,0,0,62,65,1,0,0,0,63,65,
		3,4,2,0,64,59,1,0,0,0,64,63,1,0,0,0,65,11,1,0,0,0,66,67,5,30,0,0,67,68,
		3,14,7,0,68,69,3,10,5,0,69,13,1,0,0,0,70,71,6,7,-1,0,71,72,5,32,0,0,72,
		81,5,19,0,0,73,78,3,14,7,0,74,75,5,16,0,0,75,77,3,14,7,0,76,74,1,0,0,0,
		77,80,1,0,0,0,78,76,1,0,0,0,78,79,1,0,0,0,79,82,1,0,0,0,80,78,1,0,0,0,
		81,73,1,0,0,0,81,82,1,0,0,0,82,83,1,0,0,0,83,102,5,20,0,0,84,93,5,23,0,
		0,85,90,3,14,7,0,86,87,5,16,0,0,87,89,3,14,7,0,88,86,1,0,0,0,89,92,1,0,
		0,0,90,88,1,0,0,0,90,91,1,0,0,0,91,94,1,0,0,0,92,90,1,0,0,0,93,85,1,0,
		0,0,93,94,1,0,0,0,94,95,1,0,0,0,95,102,5,24,0,0,96,97,5,10,0,0,97,102,
		3,14,7,9,98,99,5,15,0,0,99,102,3,14,7,8,100,102,3,16,8,0,101,70,1,0,0,
		0,101,84,1,0,0,0,101,96,1,0,0,0,101,98,1,0,0,0,101,100,1,0,0,0,102,131,
		1,0,0,0,103,104,10,10,0,0,104,105,5,14,0,0,105,130,3,14,7,11,106,107,10,
		7,0,0,107,108,7,0,0,0,108,130,3,14,7,8,109,110,10,6,0,0,110,111,7,1,0,
		0,111,130,3,14,7,7,112,113,10,5,0,0,113,114,7,2,0,0,114,130,3,14,7,6,115,
		116,10,4,0,0,116,117,7,3,0,0,117,130,3,14,7,5,118,119,10,3,0,0,119,120,
		5,2,0,0,120,130,3,14,7,4,121,122,10,2,0,0,122,123,5,1,0,0,123,130,3,14,
		7,3,124,125,10,12,0,0,125,126,5,23,0,0,126,127,3,14,7,0,127,128,5,24,0,
		0,128,130,1,0,0,0,129,103,1,0,0,0,129,106,1,0,0,0,129,109,1,0,0,0,129,
		112,1,0,0,0,129,115,1,0,0,0,129,118,1,0,0,0,129,121,1,0,0,0,129,124,1,
		0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,15,1,0,0,0,133,
		131,1,0,0,0,134,135,5,19,0,0,135,136,3,14,7,0,136,137,5,20,0,0,137,144,
		1,0,0,0,138,144,7,4,0,0,139,144,7,5,0,0,140,144,5,32,0,0,141,144,5,35,
		0,0,142,144,5,27,0,0,143,134,1,0,0,0,143,138,1,0,0,0,143,139,1,0,0,0,143,
		140,1,0,0,0,143,141,1,0,0,0,143,142,1,0,0,0,144,17,1,0,0,0,13,24,35,52,
		57,64,78,81,90,93,101,129,131,143
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
